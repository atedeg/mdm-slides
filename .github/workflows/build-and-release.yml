name: Build and Publish Slides

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  deploy:
    runs-on: ubuntu-22.04
    steps:
      - name: Setup atedeg-bot
        id: atedeg-bot
        uses: tibdex/github-app-token@v2.1.0
        with:
          app_id: ${{ secrets.ATEDEG_BOT_APP_ID }}
          private_key: ${{ secrets.ATEDEG_BOT_PRIVATE_KEY }}

      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
        with:
          token: ${{ steps.atedeg-bot.outputs.token }}
          submodules: true
          fetch-depth: 0

      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v3.0.0
        with:
          hugo-version: '0.101.0'
          extended: true

      - name: Build Site
        run: hugo --minify
      - name: Deploy site
        if: ${{ github.event_name != 'pull_request' && github.ref == 'refs/heads/main' }}
        uses: JamesIves/github-pages-deploy-action@v4.7.3
        with:
          GITHUB_TOKEN: ${{ steps.atedeg-bot.outputs.token }}
          BRANCH: gh-pages
          FOLDER: public

      - name: Update package list
        run: sudo apt-get update -y

      - name: Install Chromium
        run: sudo apt-get install -y chromium-browser

      - name: Generate PDF
        run: |
          npm install -g decktape
          (hugo server) &
          decktape --load-pause 300 -p 20 http://localhost:1313/mdm-slides mdm-slides.pdf
          kill -KILL $(pidof hugo)

      - name: Release
        if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
        run: |
          if ! git describe --tags --exact-match HEAD; then
            TAG="$(git describe)" || TAG="0.1.0-$(git log -n1 --date=format:'%Y-%m-%dT%H%M%S' --format=%cd)"
            git tag "$TAG" -m "$TAG"
          fi

      - name: Release artifacts
        if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
        shell: bash
        env:
          GITHUB_TOKEN: ${{ steps.atedeg-bot.outputs.token }}
        run: |
          if [[ -z ${GITHUB_TOKEN} ]]; then
            echo "No token found... unable to deploy"
            false
          else
            TAG=$(git describe --tags --exact-match HEAD)
            hub release create -m "$(git tag -l --format='%(contents)' "$TAG")" "$TAG" || true
            for file in `ls *.pdf`
            do
              echo "Release of $file"
              gh release upload "$TAG" $file --clobber
            done
          fi